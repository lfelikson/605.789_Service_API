// Generated by delombok at Tue Jun 29 20:53:44 EDT 2021
package com.baeldung.lombok.intro;

public class ApiClientConfiguration {
    @SuppressWarnings("all")
    private static final org.slf4j.Logger log = org.slf4j.LoggerFactory.getLogger(ApiClientConfiguration.class);
    private String host;
    private int port;
    private boolean useHttps;
    private long connectTimeout;
    private long readTimeout;
    private String username;
    private String password;

    @SuppressWarnings("all")
    ApiClientConfiguration(final String host, final int port, final boolean useHttps, final long connectTimeout, final long readTimeout, final String username, final String password) {
        this.host = host;
        this.port = port;
        this.useHttps = useHttps;
        this.connectTimeout = connectTimeout;
        this.readTimeout = readTimeout;
        this.username = username;
        this.password = password;
    }


    @SuppressWarnings("all")
    public static class ApiClientConfigurationBuilder {
        @SuppressWarnings("all")
        private String host;
        @SuppressWarnings("all")
        private int port;
        @SuppressWarnings("all")
        private boolean useHttps;
        @SuppressWarnings("all")
        private long connectTimeout;
        @SuppressWarnings("all")
        private long readTimeout;
        @SuppressWarnings("all")
        private String username;
        @SuppressWarnings("all")
        private String password;

        @SuppressWarnings("all")
        ApiClientConfigurationBuilder() {
        }

        @SuppressWarnings("all")
        public ApiClientConfigurationBuilder host(final String host) {
            this.host = host;
            return this;
        }

        @SuppressWarnings("all")
        public ApiClientConfigurationBuilder port(final int port) {
            this.port = port;
            return this;
        }

        @SuppressWarnings("all")
        public ApiClientConfigurationBuilder useHttps(final boolean useHttps) {
            this.useHttps = useHttps;
            return this;
        }

        @SuppressWarnings("all")
        public ApiClientConfigurationBuilder connectTimeout(final long connectTimeout) {
            this.connectTimeout = connectTimeout;
            return this;
        }

        @SuppressWarnings("all")
        public ApiClientConfigurationBuilder readTimeout(final long readTimeout) {
            this.readTimeout = readTimeout;
            return this;
        }

        @SuppressWarnings("all")
        public ApiClientConfigurationBuilder username(final String username) {
            this.username = username;
            return this;
        }

        @SuppressWarnings("all")
        public ApiClientConfigurationBuilder password(final String password) {
            this.password = password;
            return this;
        }

        @SuppressWarnings("all")
        public ApiClientConfiguration build() {
            return new ApiClientConfiguration(host, port, useHttps, connectTimeout, readTimeout, username, password);
        }

        @Override
        @SuppressWarnings("all")
        public String toString() {
            return "ApiClientConfiguration.ApiClientConfigurationBuilder(host=" + this.host + ", port=" + this.port + ", useHttps=" + this.useHttps + ", connectTimeout=" + this.connectTimeout + ", readTimeout=" + this.readTimeout + ", username=" + this.username + ", password=" + this.password + ")";
        }
    }

    @SuppressWarnings("all")
    public static ApiClientConfigurationBuilder builder() {
        return new ApiClientConfigurationBuilder();
    }

    @SuppressWarnings("all")
    public String getHost() {
        return this.host;
    }

    @SuppressWarnings("all")
    public int getPort() {
        return this.port;
    }

    @SuppressWarnings("all")
    public boolean isUseHttps() {
        return this.useHttps;
    }

    @SuppressWarnings("all")
    public long getConnectTimeout() {
        return this.connectTimeout;
    }

    @SuppressWarnings("all")
    public long getReadTimeout() {
        return this.readTimeout;
    }

    @SuppressWarnings("all")
    public String getUsername() {
        return this.username;
    }

    @SuppressWarnings("all")
    public String getPassword() {
        return this.password;
    }
}
