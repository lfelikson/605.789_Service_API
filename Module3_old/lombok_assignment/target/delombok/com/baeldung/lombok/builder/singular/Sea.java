// Generated by delombok at Tue Jun 29 20:53:44 EDT 2021
package com.baeldung.lombok.builder.singular;

import java.util.List;

public class Sea {
    private final List<String> grasses;
    private final List<String> fish;

    @SuppressWarnings("all")
    Sea(final List<String> grasses, final List<String> fish) {
        this.grasses = grasses;
        this.fish = fish;
    }


    @SuppressWarnings("all")
    public static class SeaBuilder {
        @SuppressWarnings("all")
        private java.util.ArrayList<String> grasses;
        @SuppressWarnings("all")
        private java.util.ArrayList<String> fish;

        @SuppressWarnings("all")
        SeaBuilder() {
        }

        @SuppressWarnings("all")
        public SeaBuilder grass(final String grass) {
            if (this.grasses == null) this.grasses = new java.util.ArrayList<String>();
            this.grasses.add(grass);
            return this;
        }

        @SuppressWarnings("all")
        public SeaBuilder grasses(final java.util.Collection<? extends String> grasses) {
            if (this.grasses == null) this.grasses = new java.util.ArrayList<String>();
            this.grasses.addAll(grasses);
            return this;
        }

        @SuppressWarnings("all")
        public SeaBuilder clearGrasses() {
            if (this.grasses != null) this.grasses.clear();
            return this;
        }

        @SuppressWarnings("all")
        public SeaBuilder oneFish(final String oneFish) {
            if (this.fish == null) this.fish = new java.util.ArrayList<String>();
            this.fish.add(oneFish);
            return this;
        }

        @SuppressWarnings("all")
        public SeaBuilder fish(final java.util.Collection<? extends String> fish) {
            if (this.fish == null) this.fish = new java.util.ArrayList<String>();
            this.fish.addAll(fish);
            return this;
        }

        @SuppressWarnings("all")
        public SeaBuilder clearFish() {
            if (this.fish != null) this.fish.clear();
            return this;
        }

        @SuppressWarnings("all")
        public Sea build() {
            java.util.List<String> grasses;
            switch (this.grasses == null ? 0 : this.grasses.size()) {
            case 0: 
                grasses = java.util.Collections.emptyList();
                break;
            case 1: 
                grasses = java.util.Collections.singletonList(this.grasses.get(0));
                break;
            default: 
                grasses = java.util.Collections.unmodifiableList(new java.util.ArrayList<String>(this.grasses));
            }
            java.util.List<String> fish;
            switch (this.fish == null ? 0 : this.fish.size()) {
            case 0: 
                fish = java.util.Collections.emptyList();
                break;
            case 1: 
                fish = java.util.Collections.singletonList(this.fish.get(0));
                break;
            default: 
                fish = java.util.Collections.unmodifiableList(new java.util.ArrayList<String>(this.fish));
            }
            return new Sea(grasses, fish);
        }

        @Override
        @SuppressWarnings("all")
        public String toString() {
            return "Sea.SeaBuilder(grasses=" + this.grasses + ", fish=" + this.fish + ")";
        }
    }

    @SuppressWarnings("all")
    public static SeaBuilder builder() {
        return new SeaBuilder();
    }

    @SuppressWarnings("all")
    public List<String> getGrasses() {
        return this.grasses;
    }

    @SuppressWarnings("all")
    public List<String> getFish() {
        return this.fish;
    }
}
