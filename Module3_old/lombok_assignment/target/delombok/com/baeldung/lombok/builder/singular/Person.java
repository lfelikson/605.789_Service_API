// Generated by delombok at Tue Jun 29 20:53:44 EDT 2021
package com.baeldung.lombok.builder.singular;

import java.time.LocalDate;
import java.util.Date;
import java.util.List;
import java.util.Map;
import java.util.Set;

public class Person {
    private final String givenName;
    private final String additionalName;
    private final String familyName;
    private final List<String> tags;
    private final List<String> interests;
    private final Set<String> skills;
    private final Map<String, LocalDate> awards;

    @SuppressWarnings("all")
    Person(final String givenName, final String additionalName, final String familyName, final List<String> tags, final List<String> interests, final Set<String> skills, final Map<String, LocalDate> awards) {
        this.givenName = givenName;
        this.additionalName = additionalName;
        this.familyName = familyName;
        this.tags = tags;
        this.interests = interests;
        this.skills = skills;
        this.awards = awards;
    }


    @SuppressWarnings("all")
    public static class PersonBuilder {
        @SuppressWarnings("all")
        private String givenName;
        @SuppressWarnings("all")
        private String additionalName;
        @SuppressWarnings("all")
        private String familyName;
        @SuppressWarnings("all")
        private List<String> tags;
        @SuppressWarnings("all")
        private java.util.ArrayList<String> interests;
        @SuppressWarnings("all")
        private java.util.ArrayList<String> skills;
        @SuppressWarnings("all")
        private java.util.ArrayList<String> awards$key;
        @SuppressWarnings("all")
        private java.util.ArrayList<LocalDate> awards$value;

        @SuppressWarnings("all")
        PersonBuilder() {
        }

        @SuppressWarnings("all")
        public PersonBuilder givenName(final String givenName) {
            this.givenName = givenName;
            return this;
        }

        @SuppressWarnings("all")
        public PersonBuilder additionalName(final String additionalName) {
            this.additionalName = additionalName;
            return this;
        }

        @SuppressWarnings("all")
        public PersonBuilder familyName(final String familyName) {
            this.familyName = familyName;
            return this;
        }

        @SuppressWarnings("all")
        public PersonBuilder tags(final List<String> tags) {
            this.tags = tags;
            return this;
        }

        @SuppressWarnings("all")
        public PersonBuilder interest(final String interest) {
            if (this.interests == null) this.interests = new java.util.ArrayList<String>();
            this.interests.add(interest);
            return this;
        }

        @SuppressWarnings("all")
        public PersonBuilder interests(final java.util.Collection<? extends String> interests) {
            if (this.interests == null) this.interests = new java.util.ArrayList<String>();
            this.interests.addAll(interests);
            return this;
        }

        @SuppressWarnings("all")
        public PersonBuilder clearInterests() {
            if (this.interests != null) this.interests.clear();
            return this;
        }

        @SuppressWarnings("all")
        public PersonBuilder skill(final String skill) {
            if (this.skills == null) this.skills = new java.util.ArrayList<String>();
            this.skills.add(skill);
            return this;
        }

        @SuppressWarnings("all")
        public PersonBuilder skills(final java.util.Collection<? extends String> skills) {
            if (this.skills == null) this.skills = new java.util.ArrayList<String>();
            this.skills.addAll(skills);
            return this;
        }

        @SuppressWarnings("all")
        public PersonBuilder clearSkills() {
            if (this.skills != null) this.skills.clear();
            return this;
        }

        @SuppressWarnings("all")
        public PersonBuilder award(final String awardKey, final LocalDate awardValue) {
            if (this.awards$key == null) {
                this.awards$key = new java.util.ArrayList<String>();
                this.awards$value = new java.util.ArrayList<LocalDate>();
            }
            this.awards$key.add(awardKey);
            this.awards$value.add(awardValue);
            return this;
        }

        @SuppressWarnings("all")
        public PersonBuilder awards(final java.util.Map<? extends String, ? extends LocalDate> awards) {
            if (this.awards$key == null) {
                this.awards$key = new java.util.ArrayList<String>();
                this.awards$value = new java.util.ArrayList<LocalDate>();
            }
            for (final java.util.Map.Entry<? extends String, ? extends LocalDate> $lombokEntry : awards.entrySet()) {
                this.awards$key.add($lombokEntry.getKey());
                this.awards$value.add($lombokEntry.getValue());
            }
            return this;
        }

        @SuppressWarnings("all")
        public PersonBuilder clearAwards() {
            if (this.awards$key != null) {
                this.awards$key.clear();
                this.awards$value.clear();
            }
            return this;
        }

        @SuppressWarnings("all")
        public Person build() {
            java.util.List<String> interests;
            switch (this.interests == null ? 0 : this.interests.size()) {
            case 0: 
                interests = java.util.Collections.emptyList();
                break;
            case 1: 
                interests = java.util.Collections.singletonList(this.interests.get(0));
                break;
            default: 
                interests = java.util.Collections.unmodifiableList(new java.util.ArrayList<String>(this.interests));
            }
            java.util.Set<String> skills;
            switch (this.skills == null ? 0 : this.skills.size()) {
            case 0: 
                skills = java.util.Collections.emptySet();
                break;
            case 1: 
                skills = java.util.Collections.singleton(this.skills.get(0));
                break;
            default: 
                skills = new java.util.LinkedHashSet<String>(this.skills.size() < 1073741824 ? 1 + this.skills.size() + (this.skills.size() - 3) / 3 : Integer.MAX_VALUE);
                skills.addAll(this.skills);
                skills = java.util.Collections.unmodifiableSet(skills);
            }
            java.util.Map<String, LocalDate> awards;
            switch (this.awards$key == null ? 0 : this.awards$key.size()) {
            case 0: 
                awards = java.util.Collections.emptyMap();
                break;
            case 1: 
                awards = java.util.Collections.singletonMap(this.awards$key.get(0), this.awards$value.get(0));
                break;
            default: 
                awards = new java.util.LinkedHashMap<String, LocalDate>(this.awards$key.size() < 1073741824 ? 1 + this.awards$key.size() + (this.awards$key.size() - 3) / 3 : Integer.MAX_VALUE);
                for (int $i = 0; $i < this.awards$key.size(); $i++) awards.put(this.awards$key.get($i), (LocalDate) this.awards$value.get($i));
                awards = java.util.Collections.unmodifiableMap(awards);
            }
            return new Person(givenName, additionalName, familyName, tags, interests, skills, awards);
        }

        @Override
        @SuppressWarnings("all")
        public String toString() {
            return "Person.PersonBuilder(givenName=" + this.givenName + ", additionalName=" + this.additionalName + ", familyName=" + this.familyName + ", tags=" + this.tags + ", interests=" + this.interests + ", skills=" + this.skills + ", awards$key=" + this.awards$key + ", awards$value=" + this.awards$value + ")";
        }
    }

    @SuppressWarnings("all")
    public static PersonBuilder builder() {
        return new PersonBuilder();
    }

    @SuppressWarnings("all")
    public String getGivenName() {
        return this.givenName;
    }

    @SuppressWarnings("all")
    public String getAdditionalName() {
        return this.additionalName;
    }

    @SuppressWarnings("all")
    public String getFamilyName() {
        return this.familyName;
    }

    @SuppressWarnings("all")
    public List<String> getTags() {
        return this.tags;
    }

    @SuppressWarnings("all")
    public List<String> getInterests() {
        return this.interests;
    }

    @SuppressWarnings("all")
    public Set<String> getSkills() {
        return this.skills;
    }

    @SuppressWarnings("all")
    public Map<String, LocalDate> getAwards() {
        return this.awards;
    }
}
