// Generated by delombok at Tue Jun 29 20:53:44 EDT 2021
package com.baeldung.lombok.builder.customsetter;

import java.io.File;
import java.util.List;

public class Message {
    private String sender;
    private String recipient;
    private String text;
    private File file;


    public static class MessageBuilder {
        @SuppressWarnings("all")
        private String sender;
        @SuppressWarnings("all")
        private String recipient;
        private String text;
        private File file;

        public MessageBuilder text(String text) {
            this.text = text;
            verifyTextOrFile();
            return this;
        }

        public MessageBuilder file(File file) {
            this.file = file;
            verifyTextOrFile();
            return this;
        }

        private void verifyTextOrFile() {
            if (text != null && file != null) {
                throw new IllegalStateException("Cannot send \'text\' and \'file\'.");
            }
        }

        @SuppressWarnings("all")
        MessageBuilder() {
        }

        @SuppressWarnings("all")
        public MessageBuilder sender(final String sender) {
            this.sender = sender;
            return this;
        }

        @SuppressWarnings("all")
        public MessageBuilder recipient(final String recipient) {
            this.recipient = recipient;
            return this;
        }

        @SuppressWarnings("all")
        public Message build() {
            return new Message(sender, recipient, text, file);
        }

        @Override
        @SuppressWarnings("all")
        public String toString() {
            return "Message.MessageBuilder(sender=" + this.sender + ", recipient=" + this.recipient + ", text=" + this.text + ", file=" + this.file + ")";
        }
    }

    @SuppressWarnings("all")
    Message(final String sender, final String recipient, final String text, final File file) {
        this.sender = sender;
        this.recipient = recipient;
        this.text = text;
        this.file = file;
    }

    @SuppressWarnings("all")
    public static MessageBuilder builder() {
        return new MessageBuilder();
    }

    @SuppressWarnings("all")
    public String getSender() {
        return this.sender;
    }

    @SuppressWarnings("all")
    public String getRecipient() {
        return this.recipient;
    }

    @SuppressWarnings("all")
    public String getText() {
        return this.text;
    }

    @SuppressWarnings("all")
    public File getFile() {
        return this.file;
    }

    @SuppressWarnings("all")
    public void setSender(final String sender) {
        this.sender = sender;
    }

    @SuppressWarnings("all")
    public void setRecipient(final String recipient) {
        this.recipient = recipient;
    }

    @SuppressWarnings("all")
    public void setText(final String text) {
        this.text = text;
    }

    @SuppressWarnings("all")
    public void setFile(final File file) {
        this.file = file;
    }

    @Override
    @SuppressWarnings("all")
    public boolean equals(final Object o) {
        if (o == this) return true;
        if (!(o instanceof Message)) return false;
        final Message other = (Message) o;
        if (!other.canEqual((Object) this)) return false;
        final Object this$sender = this.getSender();
        final Object other$sender = other.getSender();
        if (this$sender == null ? other$sender != null : !this$sender.equals(other$sender)) return false;
        final Object this$recipient = this.getRecipient();
        final Object other$recipient = other.getRecipient();
        if (this$recipient == null ? other$recipient != null : !this$recipient.equals(other$recipient)) return false;
        final Object this$text = this.getText();
        final Object other$text = other.getText();
        if (this$text == null ? other$text != null : !this$text.equals(other$text)) return false;
        final Object this$file = this.getFile();
        final Object other$file = other.getFile();
        if (this$file == null ? other$file != null : !this$file.equals(other$file)) return false;
        return true;
    }

    @SuppressWarnings("all")
    protected boolean canEqual(final Object other) {
        return other instanceof Message;
    }

    @Override
    @SuppressWarnings("all")
    public int hashCode() {
        final int PRIME = 59;
        int result = 1;
        final Object $sender = this.getSender();
        result = result * PRIME + ($sender == null ? 43 : $sender.hashCode());
        final Object $recipient = this.getRecipient();
        result = result * PRIME + ($recipient == null ? 43 : $recipient.hashCode());
        final Object $text = this.getText();
        result = result * PRIME + ($text == null ? 43 : $text.hashCode());
        final Object $file = this.getFile();
        result = result * PRIME + ($file == null ? 43 : $file.hashCode());
        return result;
    }

    @Override
    @SuppressWarnings("all")
    public String toString() {
        return "Message(sender=" + this.getSender() + ", recipient=" + this.getRecipient() + ", text=" + this.getText() + ", file=" + this.getFile() + ")";
    }
}
